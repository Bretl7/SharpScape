@page "/thread/{Author}/{Title}/{Body}/{Date}"
@inject NavigationManager NavManager
@inject HttpClient Http
@using SharpScape.Website.Components.Forum
@using SharpScape.Website.Components.Forum.Pagination
<link href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css" rel="stylesheet">
<div class="background">
    <div class="container d-flex justify-content-center mt-100 mb-100">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">@Title</h4>
                    </div>
                    <div class="comment-widgets m-b-20">
                        <div class="d-flex flex-row comment-row">
                            <div class="p-2"><span class="round"><img src="images/Avatar.png" alt="user" width="50"></span></div>
                            <div class="comment-text w-100">
                                <h5>@Author</h5>
                                <div class="comment-footer">
                                    @if(Date.Length >0){
                                        <span class="date">@Date</span>
                                    }else{
                                        <span class="date">Saturday, June 18, 2022</span>
                                    }
                                    <span class="action-icons">
                                            <a href="#" data-abc="true"><i class="oi oi-pencil"></i></a>
                                            <a href="#" data-abc="true"><i class="oi oi-rotate-right"></i></a>
                                    </span>
                                </div>
                                @if (Body.Length >0)
                                {
                                    <p>@Body</p>
                                }else{
                                    <p class="m-b-5 m-t-10">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it</p>
                                }
                                <div class="col-md-3">
                                    <span class="action-icons"></span>
                                    <div class="row">
                                        <div class="col"> <a href="#"><i class="oi oi-thumb-up"></i></a><span class="d-block text-sm">20</span> </div>
                                        <div class="col"> <i class="ion-ios-chatboxes-outline icon-1x"></i> <span class="d-block text-sm">4</span> </div>
                                        <div class="col"> <i class="ion-ios-eye-outline icon-1x"></i> <span class="d-block text-sm">30</span> </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @foreach (Comment item in comments)
                        {
                            <Post
                            Author=@item.Email
                            Date="Saturday, June 18, 2022"
                            Body=@item.Body
                            Image="images/Avatar.png"
                        />    
                        }
                        @foreach (var c in Com)
                        {
                            <Post
                                Author=@c.Author
                                Date=@c.DateFormat
                                Body=@c.Post
                                Image="images/Avatar.png"
                            />
                        }
                        <div class="pagination_background">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                        PageIndex="@pageIndex"
                                        Radius="3"
                                        OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </div>
                    </div>
                    <div class="demo-section">
                    <EditForm model="@tPoster" OnValidSubmit="@HandleValidSubmit" style="background-color: #04133C">
                        <div class="form-group row" style="padding-left: 30px">
                            <label class="col-sm2 col-form-label" for="Author" style="color: white">FIRST NAME:</label>
                            <div class="col-sm-5">
                                <InputText class="form-control" @bind-Value="tPoster.Author" />
                            </div>
                        </div>
                        <div class="form-group row" style="padding-left: 30px">
                            <label class="col-sm2 col-form-label" for="Post" style="color: white">COMMENT:</label>
                            <div class="col-sm-5">

                                
                                <InputTextArea class="form-control" id="testing1" @bind-Value="tPoster.Post" />
                                
                            </div>
                        </div>
                        <div class="col-sm2 col-form-label" style="padding-left: 30px">
                            <input type="submit" class="btn btn-primary" value="Post" style="width: 100px"/>
                        </div>
                    </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public string Author { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Body { get; set; }
    [Parameter]
    public string Date { get; set; }
    Poster tPoster = new Poster();

    //not sure if I'll use this later
    bool SubmitResult = false;
    
    List<Poster> Com = new List<Poster>();
    void HandleValidSubmit()
    {
        Poster p = new Poster();
        p.Author = tPoster.Author;
        p.Post = tPoster.Post;
        p.DateFormat = Convert.ToDateTime(DateTime.Now).ToString("MMMMM dd, yyyy");

        Com.Add(p);
    }

    // pagination stuff and dummy data
    private int pageIndex = 1;
    private int itemsPerPage = 10;
    private int totalPages = 1;
    private IEnumerable<Comment> allComments = null;
    private IEnumerable<Comment> comments = Enumerable.Empty<Comment>(); 

    // methods for pagination
    protected override async Task OnInitializedAsync()
    {
        allComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>("https://jsonplaceholder.typicode.com/comments");
        if (allComments != null)
        {
            // Initialize the number of "totalPages"
            totalPages = (int)(allComments.Count() / itemsPerPage);

            // Initialize the "comments" which will be displayed when the page loaded first time.
            comments = allComments.Skip(0).Take(itemsPerPage);
        }
    }
    private void SelectedPage(int selectedPageIndex)
    {
        if (allComments != null)
        {
            pageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (pageIndex - 1);
            comments = allComments.Skip(skipCount).Take(itemsPerPage);
        }
    }
    public class Poster
    {

        public string Author { get; set; }

        public string Post { get; set; }

        public string DateFormat { get; set; }

        public Poster()
        {
        }
    }
    public class Comment
    {
        public int PostId { get; set; }
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Body { get; set; }
    }
    
}