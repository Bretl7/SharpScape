@page "/thread/{TitleT}/{Author}/{Date}/{Body}/{ThreadId}"
@inject NavigationManager NavManager
@inject HttpClient Http
@inject ForumReferenceProvider Data
@using SharpScape.Shared.Dto
@using SharpScape.Website.Components.Forum
@using SharpScape.Website.Components.Forum.Pagination
<link href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css" rel="stylesheet">
<div class="background">
    <div class="container d-flex justify-content-center mt-100 mb-100">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">@TitleT</h4>
                    </div>
                    <div class="comment-widgets m-b-20">
                        <div class="d-flex flex-row comment-row">
                            <div class="p-2"><span class="round"><img src="images/Avatar.png" alt="user" width="50"></span></div>
                            <div class="comment-text w-100">
                                <h5>@Author</h5>
                            <div class="comment-footer">
                                <span class="date">@Date</span>
                                <span class="action-icons">
                                        <a href="#" data-abc="true"><i class="oi oi-pencil"></i></a>
                                        <a href="#" data-abc="true"><i class="oi oi-rotate-right"></i></a>
                                </span>
                            </div>
                                <p>@Body</p>
                                <div class="col-md-1">
                                <div class="row">
                                        <div class="col"> <a href="#"><i class="oi oi-thumb-up"></i></a><span class="d-block text-sm">20</span> </div>
                                        <div class="col"> <i class="ion-ios-chatboxes-outline icon-1x"></i> <span class="d-block text-sm"> @posts.Count</span> </div>
                                </div>
                                <span class="action-icons"></span>
                                </div>
                            </div>
                        </div>
                        @foreach (ForumPostDto post in posts)
                        {
                        <Post
                                Author=@Data.UserName
                                Date=@post.Created.ToString("D")
                                Body=@post.Body
                                Image="images/Avatar.png"
                            />
                        }
                        @* <div class="pagination_background">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                        PageIndex="@pageIndex"
                                        Radius="3"
                                        OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </div>*@
                    </div>
                    @if(CreateThread){
                        <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4 class="modal-title">Create A Post</h4>
                                    </div>
                                    <EditForm Model="@tempPost" OnValidSubmit=@HandleValidSubmit>
                                        <div class="modal-body">
                                            <form model="@tempPost"> 
                                                <div class="form-group">
                                                    <label for="message-text" class="col-form-label">Comment:</label>
                                                @*  <textarea class="form-control" id="message-text"></textarea> *@
                                                    <InputTextArea class="form-control" id="testing1" @bind-Value="tempPost.Body" />
                                                </div>
                                            </form> 
                                        </div>
                                        <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" @onclick="@CloseCreateThread">Close</button>
                                                <button type="submit" class="btn btn-primary">Post</button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    } 
                    @* <div class="demo-section">
                    <EditForm model="@tempPost" OnValidSubmit="@HandleValidSubmit" style="background-color: #04133C">
                        <div class="form-group row" style="padding-left: 30px">
                            <label class="col-sm2 col-form-label" for="Post" style="color: white">COMMENT:</label>
                            <div class="col-sm-5">
                                <InputTextArea class="form-control" id="Post" @bind-Value="tempPost.Body" />
                            </div>
                        </div>
                        <div class="col-sm2 col-form-label" style="padding-left: 30px">
                            <input type="submit" class="btn btn-primary" value="Post" style="width: 100px"/>
                        </div>
                    </EditForm>
                    </div> *@
                </div>
                @if (Data.UserId > 0)
                {
                    <div class="row createbutton justify-content-center">
                        <button type="button" class="btn btn-primary"  @onclick="@OpenCreateThread">Make a post</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public string Author { get; set; } = "";
    [Parameter]
    public string Title { get; set; } = "";
    [Parameter]
    public string Body { get; set; } = "";
    [Parameter]
    public string Date { get; set; } = "";
    ForumPostDto tempPost = new ForumPostDto();
    bool SubmitResult = false;
    List<ForumPostDto> posts = new List<ForumPostDto>();
    [Parameter]
    public string ThreadId { get; set; }
    [Parameter]
    public string TitleT { get; set; }
    public bool CreateThread { get; set; } = false;
    public EventCallback<bool> OnClose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        posts = await Http.GetFromJsonAsync<List<ForumPostDto>>($"https://localhost:7193/api/ForumPosts/Thread{ThreadId}");
    }
    private async void HandleValidSubmit()
    {
        if (Data.UserId > 0 && Data.ThreadId != null && tempPost.Body != "")
        {
            SubmitResult = true;
        }
        if (SubmitResult)
        {
            ForumPostDto post = new ForumPostDto();
            post.AuthorId = Data.UserId;
            post.ThreadId = Data.ThreadId;
            post.Body = tempPost.Body;
            post.Created = Convert.ToDateTime(DateTime.Now);
            posts.Add(post);
            CreateThread = false;
            var result = await Http.PostAsJsonAsync("https://localhost:7193/api/ForumPosts", post);
            if (result.IsSuccessStatusCode)
            {
                posts = await result.Content.ReadAsAsync<List<ForumPostDto>>();
            }
            else
            {
                await result.Content.ReadAsStringAsync();
            }
        }
    }
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private void OpenCreateThread()
    {
        CreateThread = true;
        StateHasChanged();
    }
    private void CloseCreateThread()
    {
        CreateThread = false;
        StateHasChanged();
    }
    //}

    // pagination stuff and dummy data
    //private int pageIndex = 1;
    //private int itemsPerPage = 10;
    //private int totalPages = 1;
    //private IEnumerable<Comment> allComments = null;
    //private IEnumerable<Comment> comments = Enumerable.Empty<Comment>(); 

    // methods for pagination
    //protected override async Task OnInitializedAsync()
    //{
    //    allComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>("https://jsonplaceholder.typicode.com/comments");
    //    if (allComments != null)
    //    {
    //        // Initialize the number of "totalPages"
    //        totalPages = (int)(allComments.Count() / itemsPerPage);

    //        // Initialize the "comments" which will be displayed when the page loaded first time.
    //        comments = allComments.Skip(0).Take(itemsPerPage);
    //    }
    //}
    //private void SelectedPage(int selectedPageIndex)
    //{
    //    if (allComments != null)
    //    {
    //        pageIndex = selectedPageIndex;
    //        var skipCount = itemsPerPage * (pageIndex - 1);
    //        comments = allComments.Skip(skipCount).Take(itemsPerPage);
    //    }
    //}

    
}